package com.it.main;
/*
 *    데이터저장 ==> 데이터 처리 ==> 데이터 출력 
 *      |            |           |
 *      |            |          윈도우(도스) , 브라우저(JSP,Spring) , 핸드폰(Kotlin)
 *      |          연산자 / 제어문 ==> 구조적으로 기능 분리 (메소드) 
 *      |
 *     메모리에 한개 저장 (일반변수)
 *     메모리에 연속적인 저장 (배열)
 *     
 *     메소드 (클래스 종속) / 함수 (독립적인 사용) => C , Python , Kotlin  ==> 기능 처리 (동작)
 *     ----------------
 *     1. 한가지 기능만 모아서 관리 : 재사용이 가능 
 *        -------- 
 *     2. 관리하기 편하게 (수정,삭제,추가) ==> 오버라이딩 , 오버로딩 
 *        ----------- 구조적인 프로그램 
 *     3. 반복을 제거할때 사용 : 문장여러개가 계속 반복 => 메소드 호출 ==> OOP(자동 호출(X) ==> AOP(스프링):DI/AOP)  
 *     
 *     4. 형식 
 *        선언부
 *        [접근 지정어:public,protected,private,default] 옵션[static, abstract] 리턴형(기본형데이터형,배열,클래스) 메소드명(매개변수..)
 *        구현부 
 *        {
 *            
 *        }
 *        == 특별한 경우가 아니면 메소드는 다른 클래스와 통신을 할때 사용(메소드) : 공개 (public)
 *                                ------------- 메세지
 *        자바에서 지정하는 접근지정어 
 *        ---------------------
 *        ----------------------------------------------------------------------------------------
 *                  자신의 class안에서만 사용    같은 패키지안에서 사용   같은 패키지/상속(다른 패키지 접근이 가능)  모든 클래스 접근
 *        ----------------------------------------------------------------------------------------
 *        private           O              
 *        ----------------------------------------------------------------------------------------
 *        default           O                  O
 *        ----------------------------------------------------------------------------------------
 *        protected         O                  O                        O
 *        ----------------------------------------------------------------------------------------
 *        public            O                  O                        O                     O
 *        ----------------------------------------------------------------------------------------
 *        ** 변수는 private 
 *        ** class , 생성자 , 메소드 => public (다른 클래스 연결이 가능)
 *        
 *        접근 지정(범위) , 옵션 (메모리 할당없이 사용 => static , 메소드 선언 : abstrect) 
 *        매개변수 => 사용자로부터 받은 값 
 *        
 *        
 *        
 */
public class MainClass {

	
	public static boolean isLogin(String id,String pwd)
	{
		boolean bCheck=false;
		// 처리 => 결과값 
		if(id.equals("admin") && pwd.equals("1234"))
		{
			bCheck=true;
		}
		else
		{
			bCheck=false;
		}
		return bCheck;
	}
	// 프로그램의 시작과 종료 => main을 한개이상 포함 => 실행이 불가능 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        String id="hong";
        String pwd="1234";
        
        boolean bCheck=isLogin(id, pwd);
        if(bCheck==true)
        {
        	System.out.println("로그인 되었습니다!!");
        }
        else
        {
        	System.out.println("로그인 실패입니다!!");
        }
	}

}













