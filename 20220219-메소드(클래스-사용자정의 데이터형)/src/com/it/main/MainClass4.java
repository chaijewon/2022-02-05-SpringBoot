package com.it.main;
/*
 *   클래스 제작 
 *   ---------
 *     1) 구조 
 *        class ClassName
 *        {
 *           ----------------
 *             멤버변수
 *              변수 
 *              ---
 *               --------------------------------------------
 *               = 인스턴스 변수 : 객체가 생성될때 따로 저장되는 변수 
 *                   => 저장되는 시점 : new를 이용해서 메모리에 저장할때 
 *               = 공유변수 : 한개의 메모리에 저장 (공유) => static (정적변수)
 *                   => 컴파일시에 저장 
 *               --------------------------------- 클래스에서 선언되는 변수 
 *               = 지역변수 : 메소드안에서 생성되는 변수 
 *                   => 메소드가 호출될때 
 *           ----------------
 *             생성자 : 변수에 초기화 담당 => 한번만 호출이 가능 => 한번 수행이 있는 경우에 주로 사용 
 *                    => 데이터베이스 드라이버 등록 , DBCP , 서버 연결 , 로그인 자동 처리 => 쿠키 
 *           ----------------
 *             메소드 : 기능처리 
 *                    => 게시판 목록 
 *                    => 게시판 추가 ....
 *           ----------------
 *        }
 *        
 *        
 *        class ClassName
 *        {
 *            선언만 가능한 영역 => 구현 (연산처리 , 제어문 , 메소드 호출)
 *            
 *            --------------------------------------
 *             프로그램이 동작에 필요한 변수 설정 => 데이터 설정 
 *            --------------------------------------
 *              생성자 : 변수에 대한 초기화 => 생략시에 컴파일러에 의해서 자동으로 생성 
 *                     => 생성자는 여러개를 제작할 수 있다 
 *                     특징 
 *                      1) 클래스명과 동일 
 *                      2) 리턴형이 없다 
 *                      3) 오버로딩이 가능하다 (새로운 메소드를 만든다)
 *                      => 
 *                      class A
 *                      {
 *                         public A(){} => 디폴트 생성자 (생성자가 없는 경우 => 자동 생성)
 *                         public A(int a){}
 *                         public A(int a, int b){}
 *                         => 오버로딩 : 같은 이름의 메소드명으로 기능을 다르게 처리 
 *                            조건 
 *                            ----
 *                             1. 메소드명이 동일 
 *                             2. 매개변수의 갯수나 데이터형이 다르다 
 *                             3. 리턴형은 관계없다 
 *                         public void A(double d){} : 생성자가 아니다 (일반 메소드) 
 *                      } 
 *                      => 변수 (초기화) 
 *                         명시적인 초기화 : int a=10;
 *                         초기화 블록 
 *                            int a;
 *                            {
 *                              a=20;
 *                            }
 *                         생성자 
 *                            생성자()
 *                            {
 *                               a=30;
 *                            }
 *                            ==> 최종적 => 30
 *                            *** 생성자 클래스를 이용할때 저장후에 사용이 가능 ==> 다른 클래스 연동 (public)
 *            --------------------------------------
 *             메소드 : 기능 (한개의 기능을 수행) , 구조적인 프로그램 (가독성) ,
 *                    => 최적화 , 가독성 , 재사용 
 *                    => 리턴형(처리 결과) , 매개변수(사용자가 요청한 값) => 3개이상 배열,클래스로 묶어서 보낸다 
 *                       : 일반변수 (int,double...) , 배열(같은 데이터형만 묶어서) , 클래스(다른 데이터형을 묶어서 사용)   
 *        }
 *        -------------------------------------------------------------------------------------------
 *        객체지향의 3대 특성
 *        1. 데이터 보호 (보안) 캡슐화 => 데이터를 보호하면서 메소드를 통해서 접근이 가능  
 *        2. 재사용 => 상속 (is-a) / 포함 (has-a)
 *                   ----------  -----------
 *                       |변경해서 사용         |있는 그대로 사용 
 *                       
 *                   class A
 *                   {
 *                       데이터(A)
 *                       메소드(A) 
 *                   }
 *                   class B extends A => A클래스를 확장한 클래스 
 *                   {
 *                      // 데이터(A)
 *                      // 메소드(A) => 소스를 줄일 수 있다 ==> 변경해서 사용이 가능 => 오버라이딩
 *                   }
 *                   
 *                   *** 영향이 많다 (가급적이면 상속을 사용하지 말라) , 속도가 느리다 (A생성 => B생성)
 *                   *** 포함 
 *                   class A
 *                   {
 *                   }
 *                   class B
 *                   {
 *                       A a=new A();
 *                   }
 *                                   
 *        3. 추가 , 수정   : 다형성 
 *           추가 : 오버로딩 
 *           수정 : 오버라이딩 
 *           ------------------
 *        
 *        
 */
public class MainClass4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
